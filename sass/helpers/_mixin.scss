// size, width, height
@mixin size($width: 10rem, $height: $width) {
    width: $width;
    height: $height;
}

// position
@mixin positionElement($direction: "center", $position: absolute) {
    position: $position;
    @if $direction == "center" {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
    @if $direction == "row-center" {
        top: 50%;
        transform: translateY(-50%);
    }
    @if $direction == "col-center" {
        left: 50%;
        transform: translateX(-50%);
    }
}

// flexbox
@mixin flexBox(
    $display: flex,
    $align-items: stretch,
    $justify-content: flex-start,
    $direction: row,
    $wrap: nowrap,
    $align-content: normal
) {
    display: $display;
    flex-direction: $direction;
    flex-wrap: $wrap;
    justify-content: $justify-content;
    align-items: $align-items;
    align-content: $align-content;
}

// hide scroll
@mixin hideScroll() {
    -ms-overflow-style: none;
    scrollbar-width: none;
    &::-webkit-scrollbar {
        display: none;
    }
}

// text clamp
@mixin textClamp($rows: 1, $size: 100%) {
    display: -webkit-box;
    -webkit-line-clamp: $rows;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    width: $size;
    max-width: $size;
    white-space: pre-wrap;
    word-break: break-word;
}

// touch slider
@mixin touchSlider($width: 80%, $gap: 2.5rem, $padding: 1rem) {
    display: grid !important;
    justify-content: flex-start !important;
    grid-auto-columns: $width;
    grid-auto-flow: column;
    grid-template-columns: unset;
    grid-column-gap: $gap;
    overflow-x: auto;
    padding: $padding;
    scroll-snap-type: x mandatory;
    scroll-snap-stop: always;
    @include hideScroll();
    & > * {
        scroll-snap-align: start;
        width: auto;
    }
}

// responsive
@mixin maxWidth($breakpoint) {
    @media screen and (max-width: $breakpoint) {
        @content;
    }
}

@mixin minWidth($breakpoint) {
    @media only screen and (min-width: $breakpoint) {
        @content;
    }
}

@mixin bothWidth($breakpoint-start, $breakpoint-end) {
    @media only screen and (min-width: $breakpoint-start) and (max-width: $breakpoint-end) {
        @content;
    }
}
